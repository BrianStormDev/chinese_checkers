// Generated by gencpp from file internal/BoardMove.msg
// DO NOT EDIT!


#ifndef INTERNAL_MESSAGE_BOARDMOVE_H
#define INTERNAL_MESSAGE_BOARDMOVE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace internal
{
template <class ContainerAllocator>
struct BoardMove_
{
  typedef BoardMove_<ContainerAllocator> Type;

  BoardMove_()
    : start_x(0)
    , start_y(0)
    , end_x(0)
    , end_y(0)  {
    }
  BoardMove_(const ContainerAllocator& _alloc)
    : start_x(0)
    , start_y(0)
    , end_x(0)
    , end_y(0)  {
  (void)_alloc;
    }



   typedef int32_t _start_x_type;
  _start_x_type start_x;

   typedef int32_t _start_y_type;
  _start_y_type start_y;

   typedef int32_t _end_x_type;
  _end_x_type end_x;

   typedef int32_t _end_y_type;
  _end_y_type end_y;





  typedef boost::shared_ptr< ::internal::BoardMove_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::internal::BoardMove_<ContainerAllocator> const> ConstPtr;

}; // struct BoardMove_

typedef ::internal::BoardMove_<std::allocator<void> > BoardMove;

typedef boost::shared_ptr< ::internal::BoardMove > BoardMovePtr;
typedef boost::shared_ptr< ::internal::BoardMove const> BoardMoveConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::internal::BoardMove_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::internal::BoardMove_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::internal::BoardMove_<ContainerAllocator1> & lhs, const ::internal::BoardMove_<ContainerAllocator2> & rhs)
{
  return lhs.start_x == rhs.start_x &&
    lhs.start_y == rhs.start_y &&
    lhs.end_x == rhs.end_x &&
    lhs.end_y == rhs.end_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::internal::BoardMove_<ContainerAllocator1> & lhs, const ::internal::BoardMove_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace internal

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::internal::BoardMove_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::internal::BoardMove_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::internal::BoardMove_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::internal::BoardMove_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::internal::BoardMove_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::internal::BoardMove_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::internal::BoardMove_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d9a81541f0e7558640a92686275d893";
  }

  static const char* value(const ::internal::BoardMove_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d9a81541f0e7558ULL;
  static const uint64_t static_value2 = 0x640a92686275d893ULL;
};

template<class ContainerAllocator>
struct DataType< ::internal::BoardMove_<ContainerAllocator> >
{
  static const char* value()
  {
    return "internal/BoardMove";
  }

  static const char* value(const ::internal::BoardMove_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::internal::BoardMove_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 start_x\n"
"int32 start_y\n"
"int32 end_x\n"
"int32 end_y\n"
;
  }

  static const char* value(const ::internal::BoardMove_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::internal::BoardMove_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_x);
      stream.next(m.start_y);
      stream.next(m.end_x);
      stream.next(m.end_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoardMove_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::internal::BoardMove_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::internal::BoardMove_<ContainerAllocator>& v)
  {
    s << indent << "start_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.start_x);
    s << indent << "start_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.start_y);
    s << indent << "end_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.end_x);
    s << indent << "end_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.end_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERNAL_MESSAGE_BOARDMOVE_H
